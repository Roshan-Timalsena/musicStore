/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package AppliancesInfo;


import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.JPanel;


/**
*
* @author Chintan
*/
public class AppliancesInfo extends javax.swing.JFrame {
    
    //Arraylist declared to store inventory items as objects
    ArrayList<Instruments> InstrumentList = new ArrayList<Instruments>();
    
    //Variable assigned to count number of CSV imports
    private int importCount=0;
    
    /**
    * Creates new form AppliancesInfo
    */
    public AppliancesInfo() {
        //Initializing the frame 
        initComponents();
        panelInventoryDetails.setVisible(true);
        MainPane.setVisible(true);
        panelSearchItems.setVisible(false);
        panelAddInfo.setVisible(false);
        Image icon = Toolkit.getDefaultToolkit().getImage("src//icons//ABCMusic.png");
        this.setIconImage(icon);
    }
    
    /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRecommendation = new javax.swing.ButtonGroup();
        MainPane = new javax.swing.JPanel();
        GroupName = new javax.swing.JLabel();
        SystemTitle = new javax.swing.JLabel();
        lblSystemTitle = new javax.swing.JLabel();
        btnInstrumentDetails = new javax.swing.JPanel();
        iconInstrumentDetails = new javax.swing.JLabel();
        txtInstrumentDetails = new javax.swing.JLabel();
        btnAddInfo = new javax.swing.JPanel();
        iconAddInfo = new javax.swing.JLabel();
        txtAddInfo = new javax.swing.JLabel();
        btnSearchItems = new javax.swing.JPanel();
        iconSearchItems = new javax.swing.JLabel();
        txtSearchItems = new javax.swing.JLabel();
        panelInventoryDetails = new javax.swing.JPanel();
        panelTable = new javax.swing.JPanel();
        Table = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        btnTableClear = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        TitleBarID = new javax.swing.JPanel();
        TitleBarName = new javax.swing.JLabel();
        panelSearchItems = new javax.swing.JPanel();
        TitleBarSearchItems = new javax.swing.JPanel();
        TitleBarSearch = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        lblInstrumentDetails2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        lblInstrumentDetails = new javax.swing.JLabel();
        cbCatagories = new javax.swing.JComboBox<>();
        btnSearchCatagory = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        panelAddInfo = new javax.swing.JPanel();
        TitleBarAddInfo = new javax.swing.JPanel();
        TitleBarNameAddInfo = new javax.swing.JLabel();
        tfModelNumber = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        lblModelNumber = new javax.swing.JLabel();
        cbCategory = new javax.swing.JComboBox<>();
        lblCategory = new javax.swing.JLabel();
        tfInstrumentName = new javax.swing.JTextField();
        lblInstrumentName = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        tfPrice = new javax.swing.JTextField();
        lblBrand = new javax.swing.JLabel();
        tfBrand = new javax.swing.JTextField();
        jFormSeparator = new javax.swing.JSeparator();
        lblRecommendation = new javax.swing.JLabel();
        tfDiscount = new javax.swing.JTextField();
        lblDiscount = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        rbTopSeller = new javax.swing.JRadioButton();
        rbRecommended = new javax.swing.JRadioButton();
        rbLimited = new javax.swing.JRadioButton();
        lblNote = new javax.swing.JLabel();
        mainMenu = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        importFile = new javax.swing.JMenuItem();
        closeFile = new javax.swing.JMenuItem();
        AboutMenu = new javax.swing.JMenu();
        aboutHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Management System");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(100, 100, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("Music Warehouse IS"); // NOI18N
        setResizable(false);

        MainPane.setBackground(new java.awt.Color(54, 33, 89));
        MainPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GroupName.setFont(new java.awt.Font("Rockwell Condensed", 1, 18)); // NOI18N
        GroupName.setForeground(new java.awt.Color(255, 255, 255));
        GroupName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GroupName.setText("Group: CR3");
        GroupName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GroupName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GroupNameMouseClicked(evt);
            }
        });
        MainPane.add(GroupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 570, 270, 60));

        SystemTitle.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        SystemTitle.setForeground(new java.awt.Color(255, 255, 255));
        SystemTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SystemTitle.setText("music company");
        SystemTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        MainPane.add(SystemTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 40, 100, 30));

        lblSystemTitle.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 24)); // NOI18N
        lblSystemTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblSystemTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSystemTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/ABCMusic.png"))); // NOI18N
        lblSystemTitle.setText("DUNDER MIFFLIN");
        lblSystemTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        MainPane.add(lblSystemTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 210, 50));

        btnInstrumentDetails.setBackground(new java.awt.Color(85, 65, 118));
        btnInstrumentDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInstrumentDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnInstrumentDetailsMousePressed(evt);
            }
        });

        iconInstrumentDetails.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconInstrumentDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/001-menu.png"))); // NOI18N

        txtInstrumentDetails.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtInstrumentDetails.setForeground(new java.awt.Color(255, 255, 255));
        txtInstrumentDetails.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtInstrumentDetails.setText("INVENTORY DETAILS");

        javax.swing.GroupLayout btnInstrumentDetailsLayout = new javax.swing.GroupLayout(btnInstrumentDetails);
        btnInstrumentDetails.setLayout(btnInstrumentDetailsLayout);
        btnInstrumentDetailsLayout.setHorizontalGroup(
            btnInstrumentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnInstrumentDetailsLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(iconInstrumentDetails)
                .addGap(18, 18, 18)
                .addComponent(txtInstrumentDetails)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        btnInstrumentDetailsLayout.setVerticalGroup(
            btnInstrumentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(txtInstrumentDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
            .addComponent(iconInstrumentDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        MainPane.add(btnInstrumentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 115, 270, 50));

        btnAddInfo.setBackground(new java.awt.Color(54, 33, 89));
        btnAddInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddInfoMousePressed(evt);
            }
        });

        iconAddInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconAddInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/005-plus.png"))); // NOI18N

        txtAddInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtAddInfo.setForeground(new java.awt.Color(255, 255, 255));
        txtAddInfo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtAddInfo.setText("ADD INFO");

        javax.swing.GroupLayout btnAddInfoLayout = new javax.swing.GroupLayout(btnAddInfo);
        btnAddInfo.setLayout(btnAddInfoLayout);
        btnAddInfoLayout.setHorizontalGroup(
            btnAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnAddInfoLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(iconAddInfo)
                .addGap(18, 18, 18)
                .addComponent(txtAddInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        btnAddInfoLayout.setVerticalGroup(
            btnAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(iconAddInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtAddInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        MainPane.add(btnAddInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 215, 270, -1));

        btnSearchItems.setBackground(new java.awt.Color(54, 33, 89));
        btnSearchItems.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSearchItemsMousePressed(evt);
            }
        });

        iconSearchItems.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconSearchItems.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/004-search.png"))); // NOI18N

        txtSearchItems.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSearchItems.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchItems.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtSearchItems.setText("SEARCH ITEMS");

        javax.swing.GroupLayout btnSearchItemsLayout = new javax.swing.GroupLayout(btnSearchItems);
        btnSearchItems.setLayout(btnSearchItemsLayout);
        btnSearchItemsLayout.setHorizontalGroup(
            btnSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnSearchItemsLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(iconSearchItems)
                .addGap(18, 18, 18)
                .addComponent(txtSearchItems)
                .addContainerGap(93, Short.MAX_VALUE))
        );
        btnSearchItemsLayout.setVerticalGroup(
            btnSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchItems, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(iconSearchItems, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        MainPane.add(btnSearchItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 165, 270, -1));

        panelInventoryDetails.setBackground(new java.awt.Color(255, 255, 255));

        panelTable.setBackground(new java.awt.Color(255, 255, 255));

        Table.setBorder(null);
        Table.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        InventoryTable.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        InventoryTable.setForeground(new java.awt.Color(0, 0, 153));
        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Model No.", "Name", "Category", "Brand", "Recommendation", "Discount", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        InventoryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        InventoryTable.setGridColor(new java.awt.Color(255, 255, 255));
        InventoryTable.setInheritsPopupMenu(true);
        InventoryTable.setRowHeight(20);
        InventoryTable.setSelectionBackground(new java.awt.Color(153, 153, 255));
        InventoryTable.getTableHeader().setReorderingAllowed(false);
        InventoryTable.setUpdateSelectionOnSort(false);
        Table.setViewportView(InventoryTable);
        if (InventoryTable.getColumnModel().getColumnCount() > 0) {
            InventoryTable.getColumnModel().getColumn(0).setResizable(false);
            InventoryTable.getColumnModel().getColumn(0).setPreferredWidth(6);
            InventoryTable.getColumnModel().getColumn(1).setResizable(false);
            InventoryTable.getColumnModel().getColumn(2).setResizable(false);
            InventoryTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            InventoryTable.getColumnModel().getColumn(3).setResizable(false);
            InventoryTable.getColumnModel().getColumn(4).setResizable(false);
            InventoryTable.getColumnModel().getColumn(5).setResizable(false);
            InventoryTable.getColumnModel().getColumn(5).setPreferredWidth(10);
            InventoryTable.getColumnModel().getColumn(6).setResizable(false);
            InventoryTable.getColumnModel().getColumn(6).setPreferredWidth(6);
        }

        btnTableClear.setBackground(new java.awt.Color(204, 204, 255));
        btnTableClear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTableClear.setForeground(new java.awt.Color(68, 5, 150));
        btnTableClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cleared.png"))); // NOI18N
        btnTableClear.setText("Clear Table");
        btnTableClear.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        btnTableClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableClearActionPerformed(evt);
            }
        });

        btnImport.setBackground(new java.awt.Color(204, 204, 255));
        btnImport.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnImport.setForeground(new java.awt.Color(68, 5, 150));
        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/import.png"))); // NOI18N
        btnImport.setText("Import");
        btnImport.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Table, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)
                    .addGroup(panelTableLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTableClear, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTableLayout.createSequentialGroup()
                .addComponent(Table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnTableClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImport, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        TitleBarID.setBackground(new java.awt.Color(68, 5, 150));

        TitleBarName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TitleBarName.setForeground(new java.awt.Color(255, 255, 255));
        TitleBarName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TitleBarName.setText("Warehouse Inventory /");

        javax.swing.GroupLayout TitleBarIDLayout = new javax.swing.GroupLayout(TitleBarID);
        TitleBarID.setLayout(TitleBarIDLayout);
        TitleBarIDLayout.setHorizontalGroup(
            TitleBarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitleBarIDLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(TitleBarName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TitleBarIDLayout.setVerticalGroup(
            TitleBarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitleBarIDLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(TitleBarName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout panelInventoryDetailsLayout = new javax.swing.GroupLayout(panelInventoryDetails);
        panelInventoryDetails.setLayout(panelInventoryDetailsLayout);
        panelInventoryDetailsLayout.setHorizontalGroup(
            panelInventoryDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TitleBarID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelInventoryDetailsLayout.setVerticalGroup(
            panelInventoryDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInventoryDetailsLayout.createSequentialGroup()
                .addComponent(TitleBarID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPane.add(panelInventoryDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 880, 630));

        panelSearchItems.setBackground(new java.awt.Color(255, 255, 255));
        panelSearchItems.setPreferredSize(new java.awt.Dimension(880, 607));

        TitleBarSearchItems.setBackground(new java.awt.Color(68, 5, 150));

        TitleBarSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TitleBarSearch.setForeground(new java.awt.Color(255, 255, 255));
        TitleBarSearch.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TitleBarSearch.setText("Search /");

        javax.swing.GroupLayout TitleBarSearchItemsLayout = new javax.swing.GroupLayout(TitleBarSearchItems);
        TitleBarSearchItems.setLayout(TitleBarSearchItemsLayout);
        TitleBarSearchItemsLayout.setHorizontalGroup(
            TitleBarSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitleBarSearchItemsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(TitleBarSearch)
                .addContainerGap(778, Short.MAX_VALUE))
        );
        TitleBarSearchItemsLayout.setVerticalGroup(
            TitleBarSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitleBarSearchItemsLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(TitleBarSearch)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        tfSearch.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        tfSearch.setToolTipText("Price you're searching for");

        lblInstrumentDetails2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblInstrumentDetails2.setForeground(new java.awt.Color(51, 0, 204));
        lblInstrumentDetails2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblInstrumentDetails2.setText("Search Items in the categories");

        btnSearch.setBackground(new java.awt.Color(204, 204, 255));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(68, 5, 150));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        btnSearch.setText(" Search");
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblInstrumentDetails.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblInstrumentDetails.setForeground(new java.awt.Color(51, 0, 204));
        lblInstrumentDetails.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblInstrumentDetails.setText("Price Search");

        cbCatagories.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cbCatagories.setForeground(new java.awt.Color(68, 5, 150));
        cbCatagories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   Guitars and Bases", "   Keyboard and Piano", "   Drums", "   Flutes", "   Harmonica", "   Folk Instruments", "   Accessories" }));
        cbCatagories.setBorder(null);
        cbCatagories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCatagoriesActionPerformed(evt);
            }
        });

        btnSearchCatagory.setBackground(new java.awt.Color(204, 204, 255));
        btnSearchCatagory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSearchCatagory.setForeground(new java.awt.Color(68, 5, 150));
        btnSearchCatagory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/items.png"))); // NOI18N
        btnSearchCatagory.setText("Instruments available ");
        btnSearchCatagory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchCatagory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCatagoryActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 255));
        jLabel1.setText("Search Items by price.");

        javax.swing.GroupLayout panelSearchItemsLayout = new javax.swing.GroupLayout(panelSearchItems);
        panelSearchItems.setLayout(panelSearchItemsLayout);
        panelSearchItemsLayout.setHorizontalGroup(
            panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TitleBarSearchItems, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelSearchItemsLayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addGroup(panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lblInstrumentDetails2)
                    .addComponent(lblInstrumentDetails)
                    .addGroup(panelSearchItemsLayout.createSequentialGroup()
                        .addGroup(panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfSearch)
                            .addComponent(cbCatagories, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearchCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSearchItemsLayout.setVerticalGroup(
            panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchItemsLayout.createSequentialGroup()
                .addComponent(TitleBarSearchItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(lblInstrumentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(lblInstrumentDetails2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSearchItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCatagories, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(128, Short.MAX_VALUE))
        );

        MainPane.add(panelSearchItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 880, 630));

        panelAddInfo.setBackground(new java.awt.Color(255, 255, 255));

        TitleBarAddInfo.setBackground(new java.awt.Color(68, 5, 150));

        TitleBarNameAddInfo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TitleBarNameAddInfo.setForeground(new java.awt.Color(255, 255, 255));
        TitleBarNameAddInfo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TitleBarNameAddInfo.setText("Form Fill Up / ");

        javax.swing.GroupLayout TitleBarAddInfoLayout = new javax.swing.GroupLayout(TitleBarAddInfo);
        TitleBarAddInfo.setLayout(TitleBarAddInfoLayout);
        TitleBarAddInfoLayout.setHorizontalGroup(
            TitleBarAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitleBarAddInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(TitleBarNameAddInfo)
                .addContainerGap(741, Short.MAX_VALUE))
        );
        TitleBarAddInfoLayout.setVerticalGroup(
            TitleBarAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitleBarAddInfoLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(TitleBarNameAddInfo)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        tfModelNumber.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        tfModelNumber.setForeground(new java.awt.Color(153, 153, 255));
        tfModelNumber.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfModelNumber.setToolTipText("Instrument's unique Model Number");
        tfModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfModelNumberActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(204, 204, 255));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(68, 5, 150));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add-green.png"))); // NOI18N
        btnAdd.setText("  ADD");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblModelNumber.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblModelNumber.setForeground(new java.awt.Color(51, 0, 204));
        lblModelNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblModelNumber.setText("Model Number: *");

        cbCategory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cbCategory.setForeground(new java.awt.Color(68, 5, 150));
        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Guitars and Bases", "Keyboard and Piano", "Drums", "Flutes", "Harmonica", "Folk Instruments", "Accessories" }));
        cbCategory.setBorder(null);
        cbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoryActionPerformed(evt);
            }
        });

        lblCategory.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCategory.setForeground(new java.awt.Color(51, 0, 204));
        lblCategory.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCategory.setText("Category:");

        tfInstrumentName.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        tfInstrumentName.setForeground(new java.awt.Color(153, 153, 255));
        tfInstrumentName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfInstrumentName.setToolTipText("Instrument's Name");
        tfInstrumentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfInstrumentNameActionPerformed(evt);
            }
        });

        lblInstrumentName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblInstrumentName.setForeground(new java.awt.Color(51, 0, 204));
        lblInstrumentName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblInstrumentName.setText("Instrument Name:");

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(51, 0, 204));
        lblPrice.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPrice.setText("Price: *");

        tfPrice.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        tfPrice.setForeground(new java.awt.Color(153, 153, 255));
        tfPrice.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfPrice.setToolTipText("Instrument's price in number");
        tfPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPriceActionPerformed(evt);
            }
        });

        lblBrand.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblBrand.setForeground(new java.awt.Color(51, 0, 204));
        lblBrand.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBrand.setText("Brand");

        tfBrand.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        tfBrand.setForeground(new java.awt.Color(153, 153, 255));
        tfBrand.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfBrandActionPerformed(evt);
            }
        });

        lblRecommendation.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblRecommendation.setForeground(new java.awt.Color(51, 0, 204));
        lblRecommendation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblRecommendation.setText("Recommendation:");

        tfDiscount.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        tfDiscount.setForeground(new java.awt.Color(153, 153, 255));
        tfDiscount.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfDiscount.setToolTipText("Allocated price discount (number)");
        tfDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDiscountActionPerformed(evt);
            }
        });

        lblDiscount.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblDiscount.setForeground(new java.awt.Color(51, 0, 204));
        lblDiscount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDiscount.setText("Discount: *");

        btnClear.setBackground(new java.awt.Color(204, 204, 255));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(68, 5, 150));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete.png"))); // NOI18N
        btnClear.setText(" CLEAR");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        rbTopSeller.setBackground(new java.awt.Color(255, 255, 255));
        bgRecommendation.add(rbTopSeller);
        rbTopSeller.setSelected(true);
        rbTopSeller.setText("Top Seller");
        rbTopSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTopSellerActionPerformed(evt);
            }
        });

        rbRecommended.setBackground(new java.awt.Color(255, 255, 255));
        bgRecommendation.add(rbRecommended);
        rbRecommended.setText("Recommended");
        rbRecommended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbRecommendedActionPerformed(evt);
            }
        });

        rbLimited.setBackground(new java.awt.Color(255, 255, 255));
        bgRecommendation.add(rbLimited);
        rbLimited.setText("Limited");
        rbLimited.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLimitedActionPerformed(evt);
            }
        });

        lblNote.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lblNote.setForeground(new java.awt.Color(102, 0, 0));
        lblNote.setText("NOTE: Labels with symbol * require numerical inputs");

        javax.swing.GroupLayout panelAddInfoLayout = new javax.swing.GroupLayout(panelAddInfo);
        panelAddInfo.setLayout(panelAddInfoLayout);
        panelAddInfoLayout.setHorizontalGroup(
            panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TitleBarAddInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelAddInfoLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(lblNote)
                .addContainerGap(399, Short.MAX_VALUE))
            .addGroup(panelAddInfoLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelAddInfoLayout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddInfoLayout.createSequentialGroup()
                                .addComponent(rbTopSeller)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbRecommended)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbLimited))
                            .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tfDiscount, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelAddInfoLayout.createSequentialGroup()
                        .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblModelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblInstrumentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBrand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfInstrumentName)
                            .addComponent(tfModelNumber)
                            .addComponent(tfBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblDiscount)
                    .addComponent(lblRecommendation)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158))
        );
        panelAddInfoLayout.setVerticalGroup(
            panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddInfoLayout.createSequentialGroup()
                .addComponent(TitleBarAddInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblInstrumentName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfInstrumentName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfBrand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jFormSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblRecommendation, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbTopSeller)
                    .addComponent(rbRecommended)
                    .addComponent(rbLimited))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(lblNote)
                .addGap(40, 40, 40))
        );

        MainPane.add(panelAddInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 880, 630));

        mainMenu.setBackground(new java.awt.Color(255, 255, 255));
        mainMenu.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 0, true));
        mainMenu.setPreferredSize(new java.awt.Dimension(76, 25));

        FileMenu.setText("File");

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setBackground(new java.awt.Color(255, 255, 255));
        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        FileMenu.add(openFile);

        importFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        importFile.setText("Import");
        importFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileActionPerformed(evt);
            }
        });
        FileMenu.add(importFile);

        closeFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        closeFile.setBackground(new java.awt.Color(255, 255, 255));
        closeFile.setText("Close");
        closeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileActionPerformed(evt);
            }
        });
        FileMenu.add(closeFile);

        mainMenu.add(FileMenu);

        AboutMenu.setText("Help");

        aboutHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        aboutHelp.setBackground(new java.awt.Color(255, 255, 255));
        aboutHelp.setText("About");
        aboutHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutHelpActionPerformed(evt);
            }
        });
        AboutMenu.add(aboutHelp);

        mainMenu.add(AboutMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void btnSearchItemsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchItemsMousePressed
        //To make 'Search Items' panel visible
        setColor(btnSearchItems);
        resetColor(btnInstrumentDetails);
        resetColor(btnAddInfo);
        MainPane.setVisible(true);
        panelSearchItems.setVisible(true);
        panelInventoryDetails.setVisible(false);
        panelAddInfo.setVisible(false);
    }//GEN-LAST:event_btnSearchItemsMousePressed
    
    private void btnAddInfoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddInfoMousePressed
        //To make 'AddInfo' panel visible
        setColor(btnAddInfo);
        resetColor(btnInstrumentDetails);
        resetColor(btnSearchItems);
        MainPane.setVisible(true);
        panelAddInfo.setVisible(true);
        panelSearchItems.setVisible(false);
        panelInventoryDetails.setVisible(false);
        
    }//GEN-LAST:event_btnAddInfoMousePressed
    
    private void btnInstrumentDetailsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInstrumentDetailsMousePressed
        //To make 'Instrument Details' panel visible
        setColor(btnInstrumentDetails);
        resetColor(btnSearchItems);
        resetColor(btnAddInfo);
        panelInventoryDetails.setVisible(true);
        MainPane.setVisible(true);
        panelSearchItems.setVisible(false);
        panelAddInfo.setVisible(false);
        
    }//GEN-LAST:event_btnInstrumentDetailsMousePressed
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        //To search an item in the list according to the price.
        
        //Intitialize the user input 
        int userValue;
        try{
            //Checking if the input is empty
            if(tfSearch.getText().trim().isEmpty()){
                JOptionPane.showMessageDialog(panelSearchItems,"Nothing To Search :(","Error",JOptionPane.ERROR_MESSAGE);
            }
            //Checking if the list-to-be-searched is empty
            else if(InstrumentList.isEmpty()){
                JOptionPane.showMessageDialog(panelSearchItems,"Sorry!!!\n Seems like the database is empty."
                + "\nPlease make sure to add or import data at first. :) ","Error",JOptionPane.ERROR_MESSAGE);       
            }
            //Initiate search process after all inputs are validated
            else{
                //Parsing the string obtained from user to integer
                userValue = Integer.parseInt(tfSearch.getText().trim());
                /*SORTING through SELECTION*/
                for(int i = 0; i < InstrumentList.size(); i++){
                    int minPos = InstrumentList.indexOf(InstrumentList.get(i));
                    for(int j = i + 1; j < InstrumentList.size(); j++){
                        if(InstrumentList.get(j).getPrice() < InstrumentList.get(minPos).getPrice()){
                            minPos = InstrumentList.indexOf(InstrumentList.get(j));
                        }
                    }
                    
                    Instruments temp = InstrumentList.get(i);
                    InstrumentList.set(i,InstrumentList.get(minPos));
                    InstrumentList.set(minPos, temp);
                    
                }
                
                /*SEARCHING*/
                int index = binarySearch(InstrumentList, 0, InstrumentList.size() - 1, userValue);
                if(index == -1){
                    JOptionPane.showMessageDialog(panelSearchItems,"Sorry! We do not have anything for that price.","Error",JOptionPane.ERROR_MESSAGE);
                    tfSearch.setText("");
                }
                else{
                    JOptionPane.showMessageDialog(panelSearchItems,"We have "+ InstrumentList.get(index).getName()+" for that price.","Search Result",JOptionPane.INFORMATION_MESSAGE);
                    tfSearch.setText("");
                }
            }
        }
        //Error message if the format is different.
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Oops!!!\n"
            + "The input seems to be different format.\n"
            + "Please provide numeric input in the requested textfields.","Format Mismatch",JOptionPane.ERROR_MESSAGE);
        }
    }                                         
    
    //BINARY SEARCH ALGORITHM
    /*
        Binary search algorithm is applied for searching the item in the list by price.
    */
    private int binarySearch(ArrayList<Instruments> a, int low, int high,int value){
        if(low <= high){
            int mid = (low + high) / 2;
            if(a.get(mid).getPrice() == value){
                return mid;
            }else if(a.get(mid).getPrice() > value){
                return binarySearch(a, low, mid - 1, value);
            }else{
                return binarySearch(a, mid + 1, high, value);
            }
        }else{
            return -1;
        }
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void cbCatagoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCatagoriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCatagoriesActionPerformed
    
    private void btnSearchCatagoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCatagoryActionPerformed
        
        //Searching the items according to the category
        String checker = cbCatagories.getSelectedItem().toString().trim(); //Getting the selected category 
        String value = "";
        

        // Counting the nimber of items is the selected category
        int count = 0;
        for(int i = 0; i < InstrumentList.size(); i++){
            String store = InstrumentList.get(i).getCategory().trim();
            if(checker.equals(store)){
                value = (InstrumentList.get(i).getName()) + "," + value;
                count += 1;
            }
        }
        
        //Formatted text for output
        String holder = stringGenerator(value);
        
        switch (count) {
            case 0:
                //When there are no items in the category
            JOptionPane.showMessageDialog(panelSearchItems,"Sorry!!\nIt Seems like we have no item of that category." ,"Instrument Details", JOptionPane.INFORMATION_MESSAGE);
            break;
            case 1:
                //When only one item is present in the category
            String newHolder = holder.substring(0,holder.length()-1);
            JOptionPane.showMessageDialog(panelSearchItems,"We only have one item in the category "+checker+" which is "+ newHolder +"."
            , "Instrument Details", JOptionPane.INFORMATION_MESSAGE);
            break;
            default:
                //When there are more than one item in the category
            String anotherHolder = holder.replace(",  and"," and");
            JOptionPane.showMessageDialog(panelSearchItems,"We have " +count+ " items in the category "+ checker +".\n"+
            "They are "+ anotherHolder +"." , "Instrument Details", JOptionPane.INFORMATION_MESSAGE);
            break;
        }
    }//GEN-LAST:event_btnSearchCatagoryActionPerformed
    
    private void tfBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfBrandActionPerformed
    
    private void tfPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPriceActionPerformed
    
    private void tfInstrumentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfInstrumentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfInstrumentNameActionPerformed
    
    private void cbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCategoryActionPerformed
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Calling the method to add the item to the list when add button is pressed.
        addItem();
        
    }//GEN-LAST:event_btnAddActionPerformed
    
    private void tfModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfModelNumberActionPerformed
    
    private void tfDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDiscountActionPerformed
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //Calling the method to clear the text fields, combo-box and radio-button in the Add Item form
        clearAll();
    }//GEN-LAST:event_btnClearActionPerformed
    
    private void rbTopSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTopSellerActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_rbTopSellerActionPerformed
    
    private void rbRecommendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbRecommendedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbRecommendedActionPerformed
    
    private void rbLimitedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLimitedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbLimitedActionPerformed
    
    private void aboutHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutHelpActionPerformed
        //Initiating the 'About' frame when navigated to About menu
        new AboutUI().setVisible(true);
    }//GEN-LAST:event_aboutHelpActionPerformed
    
    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // Opening the file browsers to open a desired file
        try{
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("");
            int userSelection = fileChooser.showOpenDialog(this);
            if(userSelection == JFileChooser.APPROVE_OPTION){
                File fileToOpen = fileChooser.getSelectedFile();
                Runtime.getRuntime().exec(" rundll32 url.dll, FileProtocolHandler " + fileToOpen);
            }
        }
        catch(HeadlessException | IOException e){
            JOptionPane.showMessageDialog(MainPane, "There was a problem while opening a file", "Error", 0);
        }
    }//GEN-LAST:event_openFileActionPerformed
    
    private void importFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileActionPerformed
        //Checking the import of file, when import action is performed (from menu)
        importCheck();       
    }//GEN-LAST:event_importFileActionPerformed
    
    private void closeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileActionPerformed
        // Exiting from the system
        System.exit(0);
    }//GEN-LAST:event_closeFileActionPerformed
    
    private void btnTableClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableClearActionPerformed
        // Clearing all the items in the table
        for (int i = 0; i < InventoryTable.getRowCount(); i++) {
            for(int j = 0; j < InventoryTable.getColumnCount(); j++) {
                InventoryTable.setValueAt("", i, j);
            }
        }
        InstrumentList.clear();
        //Setting the import counter to 0, when the table is cleared
        importCount=0;
    }//GEN-LAST:event_btnTableClearActionPerformed
    
    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        //Checking the import of file, when import action is performed (from button)
        importCheck();          
    }//GEN-LAST:event_btnImportActionPerformed
    
    private void GroupNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GroupNameMouseClicked
        new AboutUI().setVisible(true);
    }//GEN-LAST:event_GroupNameMouseClicked
    
    private void addItem(){
        //Initiating and Assigning the inputs obtained from the input form to respective variables (data type)
        String ModelNumber = tfModelNumber.getText().trim();
        String InstrumentName = tfInstrumentName.getText().trim();
        String Category = (String) cbCategory.getSelectedItem();
        String Brand = tfBrand.getText().trim();
        String Price = tfPrice.getText().trim();
        String Discount = tfDiscount.getText().trim();
        String Recommendation = "";
        if(rbTopSeller.isSelected()){ Recommendation = "Top Seller";}
        if(rbRecommended.isSelected()){ Recommendation = "Recommended";}
        if(rbLimited.isSelected()){ Recommendation = "Limited";}
        
        //Checking for empty textfields
        if(ModelNumber.equals("")||InstrumentName.equals("")||Category.equals("")||Brand.equals("")||Price.equals("")||Discount.equals("")){
            JOptionPane.showMessageDialog(rootPane, "The text fields seem to be empty.\nPlease make sure to fill all the text fields.","EMPTY TEXTFIELDS",2);
            return;
        }        
        
        // Converting Model Number and Price to respective integer values.
        int modelNo;
        int price;
        int discount;
        try{
            modelNo = Integer.parseInt(ModelNumber);
            price = Integer.parseInt(Price);
            discount = Integer.parseInt(Discount);
        }catch( NumberFormatException ae){
            //Error message when the input format is other than desired type.
            JOptionPane.showMessageDialog(rootPane, "Oops!!!\n"
            + "The input seems to be different format.\n"
            + "Please provide numeric input in the requested textfields.","Format Mismatch",2);
            tfModelNumber.setText(""); 
            tfPrice.setText("");           
            tfDiscount.setText("");
            return;
        }
        
        //Checking the valid price - discount ratio
        if(discount>price){
            JOptionPane.showMessageDialog(rootPane, "Sorry!!!\n Item's discount amount cannot be more than its price.","Discount Overflow",2);
            tfPrice.setText("");           
            tfDiscount.setText("");
            return;
        }
        
        //Checking for natural integer input
        if(modelNo < 0 || price < 0 || discount < 0){
            JOptionPane.showMessageDialog(rootPane, "Sorry!!!\nThe numerical input must be a valid natural number.","Input Mismatch",2);
            tfPrice.setText("");           
            tfDiscount.setText("");
            tfModelNumber.setText("");
            return;
        }
        
        //checking for the existing item / duplicate item
        for (Instruments MusicalInstrument : InstrumentList){
            if(modelNo==MusicalInstrument.getModelNo()){
                JOptionPane.showMessageDialog(rootPane, "Sorry!!!\n This item is already in the list.\n"
                + "Try checking the model number.","Item Repeated",2);
                return;
            }
        }
        
        
        //Checking for empty text fields.
        int rowNumber =  InventoryTable.getRowCount();
        int nextRow = 0;
        boolean emptyRow = false;
        String p;
        
        do{
            p = (String)InventoryTable.getValueAt(nextRow,0);
            if(p != null && p.length() != 0){
                nextRow++;
            }else{
                emptyRow = true;
            }
        }while( nextRow < rowNumber && !emptyRow);
        
        if(emptyRow){
            //setting the values
            //adding the object to arrayList
            InstrumentList.add(new Instruments(modelNo, InstrumentName, Category, Brand, Recommendation, discount, price));
            //Adding data to Inventory Table
            String[] value = {ModelNumber, InstrumentName, Category, Brand, Recommendation, Discount, Price}; 
            int columnCount = InventoryTable.getColumnCount();
            for(int i = 0; i < columnCount; i++ ){
                InventoryTable.setValueAt(value[i], nextRow, i);
            }
        } else{
            JOptionPane.showMessageDialog(rootPane, "Sorry!!!\n Seems like the the table is already full.","Full Table",2);
        }
        
        JOptionPane.showMessageDialog(rootPane, "Item Successfully Added :)","Item Added",1);
        clearAll();
    }
    
    //To Set selected button colour
    void setColor(JPanel panel){
        panel.setBackground(new Color(85,65,118));            
    }
    
    //To Set unselected button colour
    void resetColor(JPanel panel){
        panel.setBackground(new Color(54,33,89)); 
    }
    
    
    //To check if file has already been imported or not
    private void importCheck(){
        if(importCount==0){
            importFile(); 
            importCount += 1;
        }else{
            JOptionPane.showMessageDialog(rootPane, "Sorry!!!\nThe Database has already been imported.","Full Table",INFORMATION_MESSAGE);
        } 
    }
    
    //Generate output string for the Category search
    private String stringGenerator(String value){
        String finalValue = "";
        String [] store = value.split(",");
        if(store.length == 0 || store.length == 1){
            return value;
        }
        else if(store.length > 1){
            for(int i = 0; i < store.length; i++){
                if(i < store.length - 1){
                    //Adding comma(,) after each Name string if it's not the last item in the category
                    finalValue = finalValue + store[i] + ", ";
                }else{
                    //Adding 'and' before the last item in the category
                    finalValue = finalValue + " and " + store[i];
                }
            }
        }
        //returning the final string generated
        return finalValue.trim();
    }    
    
    //To import the required file
    private void importFile(){
        BufferedReader reader;
        try {
            //Reading the pre-selected CSV file 
            reader = new BufferedReader(new FileReader("src\\AppliancesInfo\\program.csv"));
            while (true) {
                try {
                    //Reading each line of the CSV file
                    String line = reader.readLine();
                    if (line == null) {
                        //Reading lines until there are texts
                        break;
                    }
                    //Splitting the items in each line by comma(,)
                    String[] rawInput = line.split(",");
                    
                    //Converting the details obtained to desired format
                    int modelnumber = Integer.parseInt(rawInput[0]);
                    int price = Integer.parseInt(rawInput[6]);
                    int discount = Integer.parseInt(rawInput[5]);                    
                    
                    //checking for the existing item / duplicate item
                    for (Instruments MusicalInstrument : InstrumentList){
                        if(modelnumber==MusicalInstrument.getModelNo()){
                            //Error message in case of duplicate items in the CSV file
                            JOptionPane.showMessageDialog(rootPane, "Sorry!!!\nThere seems to be duplicate data in the file."
                            + "\n Make sure to assign a unique model number to each item.","Duplicate Data Found",ERROR_MESSAGE);
                            return;
                        }
                    }
                    
                    //Empty Row check :
                    int rowNumber =  InventoryTable.getRowCount();
                    int nextRowNumber = 0;
                    boolean emptyRow = false;
                    String p2;
                    
                    //Checking for the empty row through loop
                    do{
                        p2 = (String)InventoryTable.getValueAt(nextRowNumber,0);
                        if(p2 != null && p2.length() != 0){
                            nextRowNumber++;
                        }else{
                            emptyRow = true;
                        }
                    }while( nextRowNumber < rowNumber && !emptyRow);
                    
                    //Adding the data in CSV as an ArrayList object
                    InstrumentList.add(new Instruments(modelnumber, rawInput[1], rawInput[2], rawInput[3], rawInput[4], discount, price));
                    
                    //Adding data in the empty row in the table
                    if(emptyRow){
                        String[] value = {rawInput[0], rawInput[1], rawInput[2], rawInput[3], rawInput[4], rawInput[5], rawInput[6]};
                        int columnCount = InventoryTable.getColumnCount();
                        for(int x = 0; x < columnCount; x++ ){
                            InventoryTable.setValueAt(value[x], nextRowNumber, x); 
                        }
                    } else{
                        // Error message if the table is already full
                        JOptionPane.showMessageDialog(rootPane, "Sorry!!!\n Seems like the the table is already full.","Full Table",ERROR_MESSAGE);
                    }                    
                } catch (NumberFormatException ex) {
                   return;
                }
            }
            //Closing the BufferReader
            reader.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AppliancesInfo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AppliancesInfo.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    //Clear Query
    private void clearAll(){
        //Clearing all the text fields, and setting combo-box and radiobutton to default value
        tfModelNumber.setText("");
        tfInstrumentName.setText("");
        tfPrice.setText("");
        tfDiscount.setText("");
        tfBrand.setText("");
        rbTopSeller.setSelected(true);
        cbCategory.setSelectedIndex(0);
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AppliancesInfo().setVisible(true);
        });
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JLabel GroupName;
    private javax.swing.JTable InventoryTable;
    private javax.swing.JPanel MainPane;
    private javax.swing.JLabel SystemTitle;
    private javax.swing.JScrollPane Table;
    private javax.swing.JPanel TitleBarAddInfo;
    private javax.swing.JPanel TitleBarID;
    private javax.swing.JLabel TitleBarName;
    private javax.swing.JLabel TitleBarNameAddInfo;
    private javax.swing.JLabel TitleBarSearch;
    private javax.swing.JPanel TitleBarSearchItems;
    private javax.swing.JMenuItem aboutHelp;
    private javax.swing.ButtonGroup bgRecommendation;
    private javax.swing.JButton btnAdd;
    private javax.swing.JPanel btnAddInfo;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnImport;
    private javax.swing.JPanel btnInstrumentDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchCatagory;
    private javax.swing.JPanel btnSearchItems;
    private javax.swing.JButton btnTableClear;
    private javax.swing.JComboBox<String> cbCatagories;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JMenuItem closeFile;
    private javax.swing.JLabel iconAddInfo;
    private javax.swing.JLabel iconInstrumentDetails;
    private javax.swing.JLabel iconSearchItems;
    private javax.swing.JMenuItem importFile;
    private javax.swing.JSeparator jFormSeparator;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblInstrumentDetails;
    private javax.swing.JLabel lblInstrumentDetails2;
    private javax.swing.JLabel lblInstrumentName;
    private javax.swing.JLabel lblModelNumber;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblRecommendation;
    private javax.swing.JLabel lblSystemTitle;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JPanel panelAddInfo;
    private javax.swing.JPanel panelInventoryDetails;
    private javax.swing.JPanel panelSearchItems;
    private javax.swing.JPanel panelTable;
    private javax.swing.JRadioButton rbLimited;
    private javax.swing.JRadioButton rbRecommended;
    private javax.swing.JRadioButton rbTopSeller;
    private javax.swing.JTextField tfBrand;
    private javax.swing.JTextField tfDiscount;
    private javax.swing.JTextField tfInstrumentName;
    private javax.swing.JTextField tfModelNumber;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JLabel txtAddInfo;
    private javax.swing.JLabel txtInstrumentDetails;
    private javax.swing.JLabel txtSearchItems;
    // End of variables declaration//GEN-END:variables
    
    private void If(boolean selected) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
